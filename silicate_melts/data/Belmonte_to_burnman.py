


fname = 'Belmonte_et_al_2017_mineral_table.dat'
phases = [line.rstrip('\n').split() for line in open(fname)][1:]

fields = zip(*phases)

names, formulae = fields[0:2]
H_0, S_0, Cp_a, Cp_b, Cp_c, Cp_d, Cp_e, Cp_f, Cp_g, Cp_h, V_0, K_0, Kprime_0, dKdT_p, d2KdT2_p, dKprimedT_p, a_0, a_1, a_2, a_3, a_4, T_max = [map(float, field) for field in fields[2:]]


print('# This file is part of BurnMan - a thermoelastic and thermodynamic toolkit for the Earth and Planetary Sciences\n'
      '# Copyright (C) 2012 - 2017 by the BurnMan team, released under the GNU\n'
      '# GPL v2 or later.\n\n\n'
      '"""\n'
      'BOZA_2017\n'
      'Minerals from Belmonte et al. 2017 and references therein\n'
      'File autogenerated using Belmonte_to_burnman.py\n'
      '"""\n\n'
      'from __future__ import absolute_import\n\n'
      'from ..mineral import Mineral\n'
      'from ..solidsolution import SolidSolution\n'
      'from ..solutionmodel import *\n'
      'from ..processchemistry import dictionarize_formula, formula_mass\n\n')

for i in range(len(names)):
    print('class {0} (Mineral):'.format(names[i]))
    print('    def __init__(self):')
    print('        formula = \'{0}\''.format(formulae[i]))
    print('        formula = dictionarize_formula(formula)')
    print('        self.params = {')
    print('            \'name\': \'{0}\','.format(names[i]))
    print('            \'formula\': formula,')
    print('            \'equation_of_state\': \'boza\',')
    print('            \'P_0\': 1.e5,')
    print('            \'T_0\': 298.,')
    print('            \'H_0\': {0},'.format(H_0[i]))
    print('            \'S_0\': {0},'.format(S_0[i]))
    print('            \'C_p\': np.array([{0}, {1}, {2},'.format(Cp_a[i], Cp_b[i], Cp_c[i]))
    print('                             {0}, {1}, {2},'.format(Cp_d[i], Cp_e[i], Cp_f[i]))
    print('                             {0}, {1}]),'.format(Cp_g[i], Cp_h[i]))
    print('            \'V_0\': {0},'.format(V_0[i]))
    print('            \'K_0\': {0},'.format(K_0[i]))
    print('            \'Kprime_0\': {0},'.format(Kprime_0[i]))
    print('            \'dKdT\': {0},'.format(dKdT_p[i]))
    print('            \'d2KdT2\': {0},'.format(d2KdT2_p[i]))
    print('            \'dKprimedT\': {0},'.format(dKprimedT_p[i]))
    print('            \'alpha\': np.array([{0}, {1},'.format(a_0[i], a_1[i]))
    print('                               {0}, {1}, {2}]),'.format(a_2[i], a_3[i], a_4[i]))
    print('            \'n\': sum(formula.values()),')
    print('            \'molar_mass\': formula_mass(formula)}')
    print('        Mineral.__init__(self)')
    print('')
    
